create database grocery_store;
use grocery_store;

-- 1. supplier table
CREATE TABLE IF NOT EXISTS supplier (
    sup_id TINYINT PRIMARY KEY,
    sup_name VARCHAR(255),
    address TEXT
);

-- 2. Categories Table
CREATE TABLE IF NOT EXISTS categories (
    cat_id TINYINT PRIMARY KEY,
    cat_name VARCHAR(255)
);

-- 3. Employees Table
CREATE TABLE IF NOT EXISTS employees (
    emp_id TINYINT PRIMARY KEY,
    emp_name VARCHAR(255),
    hire_date VARCHAR(255)
);

-- 4. Customers Table
CREATE TABLE IF NOT EXISTS customers (
    cust_id SMALLINT PRIMARY KEY,
    cust_name VARCHAR(255),
    address TEXT
);

-- 5. Products Table
CREATE TABLE IF NOT EXISTS products (
    prod_id TINYINT PRIMARY KEY,
    prod_name VARCHAR(255),
    sup_id TINYINT,
    cat_id TINYINT,
    price DECIMAL(10,2),
    FOREIGN KEY (sup_id) REFERENCES supplier(sup_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cat_id) REFERENCES categories(cat_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 6. Orders Table
CREATE TABLE IF NOT EXISTS orders (
    ord_id SMALLINT PRIMARY KEY,
    cust_id SMALLINT,
    emp_id TINYINT,
    order_date VARCHAR(255),
    FOREIGN KEY (cust_id) REFERENCES customers(cust_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 7. Order_Details Table
CREATE TABLE IF NOT EXISTS order_details (
    ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY,
    ord_id SMALLINT,
    prod_id TINYINT,
    quantity TINYINT,
    each_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    FOREIGN KEY (ord_id) REFERENCES orders(ord_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (prod_id) REFERENCES products(prod_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

select * from categories;

-- CUSTOMER INSIGHTS
-- 1.How many unique customers have placed orders?
select count(distinct(cust_id))
from customers;

-- Which customers have placed the highest number of orders?
select count(distinct(cust_id)) as tot_orders,cust_name
from orders
inner join customers
using(cust_id)
group by cust_name
order by tot_orders desc;

-- What is the total and average purchase value per customer?
select cust_id,sum(total_price) as total_purchase_value,avg(total_price) as avg_purchase_value
from customers
left join orders
using(cust_id) 
       left join order_details
       using(ord_id)
       group by cust_id;

-- Who are the top 5 customers by total purchase amount?
select cust_name,total_price
from customers
left join orders
using(cust_id) 
       left join order_details
       using(ord_id)
       group by cust_name,total_price
       order by total_price desc
       limit 5;
       
-- How many products exist in each category?
select distinct(cat_name) as cat,count(distinct(prod_name)) as total_prod
from categories
left join products
using(cat_id)
group by cat;

-- What is the average price of products by category?
select cat_name,avg(each_price) as avg_price
from categories
left join products
using(cat_id) 
      left join order_details
      using(prod_id)
      group by cat_name;
      
-- Which products have the highest total sales volume (by quantity)?
select distinct(prod_name) as products_ordered,sum(quantity) as quantity_ordered
from products
left join order_details
using(prod_id)
group by products_ordered
order by quantity_ordered desc;

-- What is the total revenue generated by each product?
select distinct(prod_name) as prod_ordered,sum(total_price)
from products
left join order_details
using(prod_id)
group by prod_ordered;

-- How do product sales vary by category and supplier?
select cat_name,sup_name,sum(total_price) as total_price
from categories
left join products
using(cat_id)
left join supplier
using(sup_id)
left join order_details
using(prod_id)
group by cat_name,sup_name;

-- How many orders have been placed in total?
select count(ord_detID)
from order_details;

-- What is the average value per order
select distinct(ord_id) as orders,avg(total_price) as avg_price
from order_details
group by orders;

-- On which dates were the most orders placed?
select order_date,count(ord_id) as total_orders
from orders
left join order_details
using(ord_id)
group by order_date
order by total_orders desc
limit 1;

-- What are the monthly trends in order volume and revenue?
select monthname(str_to_date(order_date, '%m/%d/%Y')) as month_ordered,count(quantity),sum(total_price)
from orders
left join order_details
using(ord_id)
group by month_ordered;

-- How do order patterns vary across weekdays and weekends?
select dayname(str_to_date(order_date,'%m/%d/%Y')) as day_name,
CASE 
    WHEN dayname(str_to_date(order_date, '%m/%d/%Y')) in ('Saturday', 'Sunday') then 'Weekend'
    ELSE 'Weekday'
  END AS day_type,
  sum(total_price) as total_price
from orders
left join order_details
using(ord_id)
group by day_name,day_type
order by total_price desc;


-- How many suppliers are there in the database?
select count(*)
from supplier;

-- Which supplier provides the most products?
select sup_name,count(*) as products
from supplier
left join products
using(sup_id)
group by sup_name
order by products desc;

-- What is the average price of products from each supplier?
select sup_name,avg(price)
from supplier
left join products
using(sup_id)
group by sup_name
order by avg(price) desc;

-- Which suppliers contribute the most to total product sales (by revenue)?
select sup_name,sum(total_price) as total_revenue
from supplier
left join products
using(sup_id)
left join order_details
using(prod_id)
group by sup_name
order by total_revenue desc;

-- How many employees have processed orders?
select count(distinct(emp_id)) as count_of_emp
from employees
left join orders
using(emp_id);

-- Which employees have handled the most orders?
select emp_name,count(distinct(ord_id)) as orders_count
from employees
left join orders
using(emp_id)
group by emp_name
order by orders_count desc;

-- What is the total sales value processed by each employee?
select emp_name,sum(total_price)
from employees
left join orders
using(emp_id)
left join order_details
using(ord_id)
group by emp_name;

-- What is the average order value handled per employee?
select emp_name,avg(total_price)
from employees
left join orders
using(emp_id)
left join order_details
using(ord_id)
group by emp_name;
 
-- What is the relationship between quantity ordered and total price?
select sum(quantity),sum(total_price)
from order_details;

-- What is the average quantity ordered per product?
select prod_name,avg(quantity)
from products
left join order_details
using(prod_id)
group by prod_name;


-- How does the unit price vary across products and orders?
select prod_name,ord_id,each_price
from products
left join order_details
using(prod_id)
left join orders
using(ord_id)
order by prod_name,ord_id;










